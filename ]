// fn adder(a: u32, b: u32) -> u32;

// pub fn inc(i: u32) -> u32 {
//     if (i & 1) == 0 {
//         return i | 1;
//     }
//     return inc(i >> 1) << 1;
// }

// pub fn adder(a: u32, b: u32) -> u32 {
//     if b == 0 {
//         return a;
//     }
//     adder(inc(a), b - 1)
// }

pub fn adder(a: u32, b: u32) -> u32 {
    let mut x = a;
    for _ in 0..b {
        let carry = 1 << 0;
        if ((x & carry) == 1) {
            while ((x & carry) == 1) {
                x &= 1 << carry;
                carry << 1;
            }
        }
        else {
            x |= 1;
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_adder() {
        assert_eq!(3, adder(1, 2));
        assert_eq!(7, adder(5, 2));
        assert_eq!(8, adder(6, 2));
    }

}
